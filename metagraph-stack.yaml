AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploys an AWS Batch-based system for Metagraph query execution.'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to subscribe to the SNS topic


Resources:
  MetagraphBucket:
    Type: AWS::S3::Bucket

  MetagraphNotificationTopic:
    Type: AWS::SNS::Topic

  MetagraphNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref MetagraphNotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  MetagraphLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSubmitBatchJobsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'batch:SubmitJob'
                  - 'batch:DescribeJobs'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::metagraph-data-public*'
                  - !Sub 'arn:aws:s3:::${MetagraphBucket}*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref MetagraphNotificationTopic

  MetagraphStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsInvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt MetagraphTaskScheduler.Arn
                  - !GetAtt MetagraphJobMonitor.Arn
                  - !GetAtt MetagraphResultAggregator.Arn
                  - !GetAtt MetagraphNotifier.Arn

  MetagraphBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  MetagraphBatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetagraphJobS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - 'arn:aws:s3:::metagraph-data-public*'
                  - !Sub 'arn:aws:s3:::${MetagraphBucket}'
                  - !Sub 'arn:aws:s3:::${MetagraphBucket}/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${MetagraphBucket}/*'

  MetagraphLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 256
              VolumeType: gp3
              DeleteOnTermination: true

  MetagraphBatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      State: ENABLED
      ServiceRole: !GetAtt MetagraphBatchServiceRole.Arn
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 256
        InstanceTypes:
          - r5.4xlarge # 16 vCPU, 128 GiB RAM
        Subnets:
          - subnet-064a41e7e9f7821a8 # eu-central-2a
          - subnet-0247650ef94e8aa42 # eu-central-2b
          - subnet-02ebd4969f85757c4 # eu-central-2c
        SecurityGroupIds:
          - sg-08aa6d6a56d63b8cd
        InstanceRole: !GetAtt ECSInstanceProfile.Arn
        LaunchTemplate:
          LaunchTemplateId: !Ref MetagraphLaunchTemplate
          Version: !GetAtt MetagraphLaunchTemplate.LatestVersionNumber

  MetagraphBatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      State: ENABLED
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref MetagraphBatchComputeEnvironment

  MetagraphBatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      RetryStrategy:
        Attempts: 3
      ContainerProperties:
        Image: 043309319928.dkr.ecr.eu-central-2.amazonaws.com/metagraph-batch:latest
        Vcpus: 1
        Memory: 32768
        Command:
          - "/bin/bash"
          - "-c"
          - |
            set -e

            mkdir -p /mnt/data
            cd /mnt/data

            aws s3 cp "$DATASET_URL/$GRAPH_FILE" .
            aws s3 cp "$DATASET_URL/$ANNO_FILE" .
            aws s3 cp "$QUERY_URL" ./query_sequences.fasta


            metagraph query \
              -i "$GRAPH_FILE" \
              -a "$ANNO_FILE" \
              --query-mode "$QUERY_MODE" \
              --num-top-labels "$NUM_TOP_LABELS" \
              --min-kmers-fraction-label "$MIN_KMERS_FRACTION_LABEL" \
              --min-kmers-fraction-graph "$MIN_KMERS_FRACTION_GRAPH" \
              query_sequences.fasta > "result.txt"

            aws s3 cp "result.txt" "$RESULT_URL/$AWS_BATCH_JOB_ID.txt"
            
            rm $GRAPH_FILE $ANNO_FILE query_sequences.fasta result.txt
        JobRoleArn: !GetAtt MetagraphBatchJobRole.Arn

  MetagraphTaskScheduler:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt MetagraphLambdaRole.Arn
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import boto3, json, os, uuid, re, math
          from collections import defaultdict

          s3 = boto3.client('s3')
          batch = boto3.client('batch')

          def list_indices(bucket, prefix):
              prefix = prefix.strip('/').rstrip('/')
              prefix += '/' if prefix else ''
              directories = defaultdict(dict)
              paginator = s3.get_paginator("list_objects_v2")
              for page in paginator.paginate(Bucket=bucket, Prefix=prefix):
                  for element in page.get("Contents", []):
                      key = element['Key']
                      is_graph = key.endswith('.dbg')
                      is_anno = key.endswith('.annodbg')
                      if is_graph or is_anno:
                          splt = key.split('/')
                          directories['/'.join(splt[:-1])[len(prefix):]]['graph' if is_graph else 'anno'] = splt[-1]
              return directories

          def lambda_handler(event, context):
              base_url = event["s3_index_url"].rstrip('/') + '/'
              bucket, prefix = base_url.replace("s3://", "").split("/", 1)
              prefix = prefix.rstrip('/')

              all_directories = list_indices(bucket, prefix)
              regex_pattern = event.get("index_filter", ".*")
              print(f'Found {len(all_directories)} indices in {base_url}')
              matching_dirs = [(path, files) for path, files in all_directories.items() if re.match(regex_pattern, path)]
              print(f'{len(matching_dirs)} indices matched against "{regex_pattern}"')

              job_id = context.aws_request_id
              print(f'Assigning tasks for Job ID {job_id}')

              tasks = []
              for relative_path, files in matching_dirs:
                  if "graph" not in files or "anno" not in files:
                      print(f"Missing required files in {relative_path}. Found: {list(files.keys())}")
                      continue

                  task_name = relative_path.replace("/", "_")

                  def file_size(bucket, key): # bytes
                      return s3.head_object(Bucket=bucket, Key=key)["ContentLength"]

                  graph_file = files["graph"]
                  anno_file = files["anno"]
                  graph_size = file_size(bucket, f"{prefix}/{relative_path}/{graph_file}")
                  anno_size = file_size(bucket, f"{prefix}/{relative_path}/{anno_file}")

                  memory_mib = (graph_size + anno_size) // 2**20 + 2**13 # 8 GiB overhead

                  print(f"Scheduling {task_name} at {memory_mib / 1024} GiB memory")

                  tasks.append(batch.submit_job(
                      jobName=f"MetagraphQuery-{job_id}-{task_name}"[:128],
                      jobQueue="${MetagraphBatchJobQueue}",
                      jobDefinition="${MetagraphBatchJobDefinition}",
                      containerOverrides={
                          "memory": memory_mib,
                          "environment": [
                            {"name": "DATASET_URL", "value": f"s3://{bucket}/{prefix}/{relative_path}"},
                            {"name": "GRAPH_FILE", "value": graph_file},
                            {"name": "ANNO_FILE", "value": anno_file},
                            {"name": "QUERY_URL", "value": f"s3://${MetagraphBucket}/queries/{event['query_filename']}"},
                            {"name": "RESULT_URL", "value": f"s3://${MetagraphBucket}/{job_id}"},
                            {"name": "QUERY_MODE", "value": event.get("query_mode", "labels")},
                            {"name": "NUM_TOP_LABELS", "value": str(event.get("num_top_labels", "inf"))},
                            {"name": "MIN_KMERS_FRACTION_LABEL", "value": str(event.get("min_kmers_fraction_label", 0.7))},
                            {"name": "MIN_KMERS_FRACTION_GRAPH", "value": str(event.get("min_kmers_fraction_graph", 0.0))}
                        ]
                      }
                  )['jobId'])

              return {"job_id": job_id, "tasks": tasks}

  MetagraphJobMonitor:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt MetagraphLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3

          batch = boto3.client('batch')

          def lambda_handler(event, context):
              job_ids = event.get("tasks", [])
              job_id = event.get("job_id")

              response = batch.describe_jobs(jobs=job_ids)

              statuses = [job["status"] for job in response["jobs"]]
              all_done = all(status in ("SUCCEEDED", "FAILED") for status in statuses)
              any_failed = any(status == "FAILED" for status in statuses)

              return {
                  "job_id": job_id,
                  "tasks": job_ids,
                  "all_done": all_done,
                  "any_failed": any_failed
              }

      Runtime: python3.11
      Timeout: 60

  MetagraphResultAggregator:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt MetagraphLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import io

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              bucket = "${MetagraphBucket}"
              job_id = event["job_id"]
              prefix = f"{job_id}/"

              result = s3.list_objects_v2(Bucket=bucket, Prefix=prefix)
              files = [obj["Key"] for obj in result.get("Contents", []) if obj["Key"].endswith(".txt")]

              combined = io.StringIO()

              for key in files:
                  obj = s3.get_object(Bucket=bucket, Key=key)
                  content = obj["Body"].read().decode()
                  combined.write(f"# {key}\n")
                  combined.write(content)
                  combined.write("\n")

              merged_key = f"{job_id}/merged_result.txt"
              s3.put_object(Bucket=bucket, Key=merged_key, Body=combined.getvalue().encode())

              return {
                  "job_id": job_id,
                  "merged_key": merged_key
              }
      Runtime: python3.11
      Timeout: 60

  MetagraphNotifier:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt MetagraphLambdaRole.Arn
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile: !Sub |
          import boto3, os
          from botocore.config import Config
          from urllib.parse import urlparse

          sns = boto3.client("sns")
          s3 = boto3.client("s3", region_name='eu-central-2', endpoint_url='https://s3.eu-central-2.amazonaws.com')

          def lambda_handler(event, context):
              presigned_url = s3.generate_presigned_url(
                  ClientMethod='get_object',
                  Params={'Bucket': '${MetagraphBucket}', 'Key': event.get("merged_key")},
                  ExpiresIn=7*24*60*60  # 7 days
              )
              print(f"Sending notification to topic ${MetagraphNotificationTopic}")
              sns.publish(
                  TopicArn="${MetagraphNotificationTopic}",
                  Message=(
                      f"Your Metagraph query has completed.\n\n"
                      f"Download your results here (valid for 7 days):\n\n{presigned_url}"
                  ),
                  Subject="Your Metagraph query has completed"
              )
              return {"status": "Notification sent"}

  MetagraphStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt MetagraphStepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "InvokeScheduler",
          "States": {
            "InvokeScheduler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${MetagraphTaskScheduler.Arn}",
                "Payload.$": "$"
              },
              "Next": "WaitJobsDone"
            },
            "WaitJobsDone": {
              "Type": "Wait",
              "Seconds": 300,
              "Next": "CheckJobsStatus"
            },
            "CheckJobsStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${MetagraphJobMonitor.Arn}",
                "Payload.$": "$"
              },
              "Next": "AreJobsDone"
            },
            "AreJobsDone": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.all_done",
                  "BooleanEquals": true,
                  "Next": "GatherResults"
                }
              ],
              "Default": "WaitJobsDone"
            },
            "GatherResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${MetagraphResultAggregator.Arn}",
                "Payload.$": "$"
              },
              "Next": "NotifyUser"
            },
            "NotifyUser": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${MetagraphNotifier.Arn}",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        }


Outputs:
  BucketName:
    Description: 'S3 Bucket for storing queries and their results.'
    Value: !Ref MetagraphBucket
  StateMachineArn:
    Description: 'ARN of the Step Functions state machine to trigger queries.'
    Value: !Ref MetagraphStateMachine
